{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hariharan\\\\AutoDoc\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AppNavigator from \"./src/navigations/Navigator\";\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isFontLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                RobotoBold: require(\"./src/fonts/Roboto-Bold.ttf\"),\n                RobotoRegular: require(\"./src/fonts/Roboto-Regular.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                isFontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.isFontLoaded === true ? React.createElement(AppNavigator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 45\n        }\n      }) : React.createElement(AppLoading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 64\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/Hariharan/AutoDoc/App.js"],"names":["StatusBar","React","AppNavigator","Font","AppLoading","App","state","isFontLoaded","loadAsync","RobotoBold","require","RobotoRegular","setState","Component"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,YAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;;IAEqBC,G;;;;;;;;;;;;;;;UACpBC,K,GAAQ;AACPC,MAAAA,YAAY,EAAE;AADP,K;;;;;;;;;;;;+CAIDJ,IAAI,CAACK,SAAL,CAAe;AACpBC,gBAAAA,UAAU,EAAEC,OAAO,+BADC;AAEpBC,gBAAAA,aAAa,EAAED,OAAO;AAFF,eAAf,C;;;AAIN,mBAAKE,QAAL,CAAc;AAAEL,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;;;;;;;;;;6BAEQ;AACR,aAAO,KAAKD,KAAL,CAAWC,YAAX,KAA4B,IAA5B,GAAmC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAnC,GAAsD,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA7D;AACA;;;;EAb+BN,KAAK,CAACY,S;;SAAlBR,G","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport AppNavigator from './src/navigations/Navigator';\nimport * as Font from 'expo-font';\n// import { AppLoading } from 'expo';\nimport AppLoading from 'expo-app-loading';\n\nexport default class App extends React.Component {\n\tstate = {\n\t\tisFontLoaded: false,\n\t};\n\tasync componentDidMount() {\n\t\tawait Font.loadAsync({\n\t\t\tRobotoBold: require('./src/fonts/Roboto-Bold.ttf'),\n\t\t\tRobotoRegular: require('./src/fonts/Roboto-Regular.ttf'),\n\t\t});\n\t\tthis.setState({ isFontLoaded: true });\n\t}\n\trender() {\n\t\treturn this.state.isFontLoaded === true ? <AppNavigator /> : <AppLoading />;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}